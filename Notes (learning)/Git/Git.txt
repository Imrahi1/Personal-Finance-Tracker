Конфликты слияния - когда одинаковые строчки в файле изменяются разработчиками и при попытке сделать merge появляется ошибка,
    также в этот момент в локальном файле появляется подсказка разницы изменений, далее нужно выбрать чьи изменения приоритетнее,
    и выбрать как актуальные их.

Рабочий день начинается с обновления веток разработки (pull) и заканчивается сохранением изменений (push)

fast-forward слияние - когда слияние взятой ветки с origin веткой произошло без сторонних изменений origin ветки,
    иначе происходит Commit-Слияние(merge-commit) и их может быть очень много

rebase - альтернатива merge-commit, но она не создает commitов слияния, она берет прошлые commitы и актуализирует их в ветку перед нашим commitом,
    в итоге получается что наша ветка перебазировалась на новую версию, и наш commit наложится поверх новой версии (без merge-commit)
    merge-commit: +безопасней, достоверная и полная история, нужен если я долго работаю в своей ветке и произошло много изменений, иначе rebase (учитывать мнение лида)
    rebase: +линейные commitы, лаконично и красиво также стоит сказать что rebase можно использовать для обновления как главной ветки, так и побочной
    Для rebase также актуальны конфликты слияния и решения идентичны.

rebase -i - интерактивный rebase который позволяет редактировать выбранное кол-во прошлых commitoв дополняя их своими commitами (работает в 1 ветке).
    Работа с commitами:
        - Поменять местами;
        - Поменять название;
        - Объединить 2 в 1;
        - Добавить изменение в существующий;
        - Разделить 1 на несколько;

cherry-pick - позволяет взять(скопировать) выборочные commitы с другой ветки и добавить в свою ветку
    Она может:
        - Менять сообщение commitа;
        - no commit, позволяет закинуть commit в ветку без создания задокументированного commita (чисто код)
        - Можно сохранять в commit идентификатор по хэшу конкретно взятого commitа из другой ветки
        - Можно сохранять имя юзера который сделал cherry-pick